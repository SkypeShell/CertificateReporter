class CRCertificate {

    [String]$ComputerName
    [int]$Port
    [String]$ComponentType
    [String]$Thumbprint
    [String]$SubjectName
    [String[]]$SubjectAlternateNames
    [DateTime]$NotBefore
    [DateTime]$NotAfter
    [String]$IssuingCertAuthority
    [int]$DaysUntilExpiration

# constructor without $ComponentType
    CRCertificate([String]$ComputerName,[int]$Port,[system.security.cryptography.x509certificates.x509certificate2]$rawCertData) {
        $this.ComputerName = $ComputerName
        $this.Port = $Port
        $this.Thumbprint = $rawCertData.Thumbprint
        $this.SubjectName = $rawCertData.Subject
        $this.SubjectAlternateNames = $rawCertData.DnsNameList -join ','
        $this.NotBefore = Get-Date (Convert-StringToDateTime -DateTimeString $rawCertData.NotBefore) -format "yyyy-MM-dd HH.mm"
        $this.NotAfter = Get-Date (Convert-StringToDateTime -DateTimeString $rawCertData.NotAfter) -format "yyyy-MM-dd HH.mm"
        $this.IssuingCertAuthority = $rawCertData.Issuer
        $this.DaysUntilExpiration = (Convert-StringToDateTime -DateTimeString $rawCertData.NotAfter - (Get-Date)).Days
        $this.ComponentType = ''
    }

# constructor with $ComponentType
    CRCertificate([String]$ComputerName,[int]$Port,[system.security.cryptography.x509certificates.x509certificate2]$rawCertData,[String]$ComponentType) {
        $this.ComputerName = $ComputerName
        $this.Port = $Port
        $this.Thumbprint = $rawCertData.Thumbprint
        $this.SubjectName = $rawCertData.Subject
        $this.SubjectAlternateNames = $rawCertData.DnsNameList -join ','
        $this.NotBefore = Get-Date (Convert-StringToDateTime -DateTimeString $rawCertData.NotBefore) -format "yyyy-MM-dd HH.mm"
        $this.NotAfter = Get-Date (Convert-StringToDateTime -DateTimeString $rawCertData.NotAfter) -format "yyyy-MM-dd HH.mm"
        $this.IssuingCertAuthority = $rawCertData.Issuer
        $this.DaysUntilExpiration = (Convert-StringToDateTime -DateTimeString $rawCertData.NotAfter - (Get-Date)).Days
        $this.ComponentType = $ComponentType
    }







}

 <#   static [string] getPrettyDate([DateTime]$date) {
        $prettyDate = Get-Date $date -Format "yyyy-MM-dd HH.mm"
        return $prettyDate
    }
#>
<#
    static [int] getDaysUntilExpiration($NotAfter) {
        $today = Get-Date
        return ($NotAfter - $today).Days      
    }
    #>
    
# Adapted from Alex Limousin - https://gallery.technet.microsoft.com/scriptcenter/Convert-String-To-Date-6c35e7ff
# Needed to deal with [DateTime] type accelerator not playing nice with non en-US date formats
<#static [DateTime] convertStringToDateTime([String]$DateTimeString) {
    $DateTimeParts = $DateTimeString -split ' '
	
    $DateParts = $DateTimeParts[0] -split '/|-|\.'

    $DateFormatParts = (Get-Culture).DateTimeFormat.ShortDatePattern -split '/|-|\.'
    $Month_Index = ($DateFormatParts | Select-String -Pattern 'M').LineNumber - 1
    $Day_Index = ($DateFormatParts | Select-String -Pattern 'd').LineNumber - 1
    $Year_Index = ($DateFormatParts | Select-String -Pattern 'y').LineNumber - 1	
	
    $TimeParts = $DateTimeParts[1..$($DateTimeParts.Count - 1)]
	
    if (@($TimeParts).Count -eq 2)
    {
        $TimeFormatParts = (Get-Culture).DateTimeFormat.ShortTimePattern -split ' '
        
        $TT_Index = ($TimeFormatParts | Select-String -Pattern 't').LineNumber - 1
        $Time_Index = 1 - $TT_Index
            
        $Time = $TimeParts[$Time_Index,$TT_Index] -join ' '
    }
    else
    {
        $Time = $TimeParts
    }
        
    $DateTime = [DateTime] $($($DateParts[$Month_Index,$Day_Index,$Year_Index] -join '/') + ' ' + $Time)

        return $DateTime
    }
    #>